// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package bumper

import (
	"fmt"
	"strings"
)

const (
	// FieldAuto is a Field of type auto.
	FieldAuto Field = "auto"
	// FieldMajor is a Field of type major.
	FieldMajor Field = "major"
	// FieldMinor is a Field of type minor.
	FieldMinor Field = "minor"
	// FieldPatch is a Field of type patch.
	FieldPatch Field = "patch"
	// FieldPrerelease is a Field of type prerelease.
	FieldPrerelease Field = "prerelease"
)

var ErrInvalidField = fmt.Errorf("not a valid Field, try [%s]", strings.Join(_FieldNames, ", "))

var _FieldNames = []string{
	string(FieldAuto),
	string(FieldMajor),
	string(FieldMinor),
	string(FieldPatch),
	string(FieldPrerelease),
}

// FieldNames returns a list of possible string values of Field.
func FieldNames() []string {
	tmp := make([]string, len(_FieldNames))
	copy(tmp, _FieldNames)
	return tmp
}

// String implements the Stringer interface.
func (x Field) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x Field) IsValid() bool {
	_, err := ParseField(string(x))
	return err == nil
}

var _FieldValue = map[string]Field{
	"auto":       FieldAuto,
	"major":      FieldMajor,
	"minor":      FieldMinor,
	"patch":      FieldPatch,
	"prerelease": FieldPrerelease,
}

// ParseField attempts to convert a string to a Field.
func ParseField(name string) (Field, error) {
	if x, ok := _FieldValue[name]; ok {
		return x, nil
	}
	return Field(""), fmt.Errorf("%s is %w", name, ErrInvalidField)
}

// MarshalText implements the text marshaller method.
func (x Field) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Field) UnmarshalText(text []byte) error {
	tmp, err := ParseField(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
