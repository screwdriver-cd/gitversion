// Code generated by MockGen. DO NOT EDIT.
// Source: git.go

// Package git is a generated GoMock package.
package git

import (
	exec "os/exec"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCmdRunner is a mock of CmdRunner interface.
type MockCmdRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCmdRunnerMockRecorder
}

// MockCmdRunnerMockRecorder is the mock recorder for MockCmdRunner.
type MockCmdRunnerMockRecorder struct {
	mock *MockCmdRunner
}

// NewMockCmdRunner creates a new mock instance.
func NewMockCmdRunner(ctrl *gomock.Controller) *MockCmdRunner {
	mock := &MockCmdRunner{ctrl: ctrl}
	mock.recorder = &MockCmdRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdRunner) EXPECT() *MockCmdRunnerMockRecorder {
	return m.recorder
}

// Output mocks base method.
func (m *MockCmdRunner) Output(arg0 *exec.Cmd) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Output indicates an expected call of Output.
func (mr *MockCmdRunnerMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockCmdRunner)(nil).Output), arg0)
}

// Run mocks base method.
func (m *MockCmdRunner) Run(arg0 *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCmdRunnerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCmdRunner)(nil).Run), arg0)
}

// MockGit is a mock of Git interface.
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit.
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance.
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// LastCommit mocks base method.
func (m *MockGit) LastCommit(short bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCommit", short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastCommit indicates an expected call of LastCommit.
func (mr *MockGitMockRecorder) LastCommit(short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCommit", reflect.TypeOf((*MockGit)(nil).LastCommit), short)
}

// LastCommitMessage mocks base method.
func (m *MockGit) LastCommitMessage() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCommitMessage")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastCommitMessage indicates an expected call of LastCommitMessage.
func (mr *MockGitMockRecorder) LastCommitMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCommitMessage", reflect.TypeOf((*MockGit)(nil).LastCommitMessage))
}

// Tag mocks base method.
func (m *MockGit) Tag(tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockGitMockRecorder) Tag(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockGit)(nil).Tag), tag)
}

// Tagged mocks base method.
func (m *MockGit) Tagged() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tagged")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tagged indicates an expected call of Tagged.
func (mr *MockGitMockRecorder) Tagged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tagged", reflect.TypeOf((*MockGit)(nil).Tagged))
}

// Tags mocks base method.
func (m *MockGit) Tags(merged bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tags", merged)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tags indicates an expected call of Tags.
func (mr *MockGitMockRecorder) Tags(merged interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockGit)(nil).Tags), merged)
}
